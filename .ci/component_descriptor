#!/usr/bin/env python3

import dataclasses
import os
import yaml

import ci.util
import gci.componentmodel


component_descriptor_base_path = os.path.abspath(ci.util.check_env('BASE_DEFINITION_PATH'))
component_descriptor_path = os.path.abspath(ci.util.check_env('COMPONENT_DESCRIPTOR_PATH'))

own_dir = os.path.abspath(os.path.dirname(__file__))
repo_dir = os.path.abspath(os.path.join(own_dir, os.pardir))
CC_UTILS_VERSIONFILE = os.path.join(repo_dir, 'CC_UTILS_VERSION')


def parse_component_descriptor():
    component_descriptor = gci.componentmodel.ComponentDescriptor.from_dict(
        ci.util.parse_yaml_file(component_descriptor_base_path)
    )
    return component_descriptor


def cc_utils_version():
    with open(CC_UTILS_VERSIONFILE) as version_file:
        cc_utils_version = version_file.read().strip()
    return cc_utils_version


def add_dependency_to_cc_utils(component: gci.componentmodel.Component):
    component.componentReferences.append(
        gci.componentmodel.ComponentReference(
            name='cc-utils',
            componentName='github.com/gardener/cc-utils',
            version=cc_utils_version(),
            labels=[],
        )
    )


def main():
    component_descriptor = parse_component_descriptor()
    component = component_descriptor.component

    add_dependency_to_cc_utils(component)

    with open(component_descriptor_path, 'w') as f:
        yaml.dump(
            data=dataclasses.asdict(component_descriptor),
            Dumper=gci.componentmodel.EnumValueYamlDumper,
            stream=f,
        )


if __name__ == '__main__':
    main()
